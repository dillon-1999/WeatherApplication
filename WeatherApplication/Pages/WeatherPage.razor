@page "/weather"
@inject HttpClient Http

<h1>Welcome To The Weather Forecast!</h1>
<br />
<br />
<form @onclick:preventDefault>
    <label for="zip">Zip Code</label>
    <input type="text" @bind-value="zipcode" name="zip" id="zip" required />
    <input type="submit" @onclick="GetForecastAsync" value="Get Weather!" />
</form>


@if (f != null)  // if there is something to display
{
    <div>
        <br />
        <h3>Weather For @f.Name</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col" >Temperature</th>
                        <th scope="col">Feels Like</th>
                    </tr>
                </thead>
     
                <tr>
                    <td>@f.main.Temp</td>
                    <td>@f.main.Feels_Like</td>
                </tr>
            </table>
    </div>
    @if (f.weather.Length > 0) // f.weather is an array of objects. It can have 0 - indiscernible amount
    {
        <h3>Weather Specifics</h3>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Type</th>
                        <th scope="col">Description</th>
                    </tr>
                </thead>
                @foreach (Weather i in f.weather)
                {
                    <tr>
                        <td>@i.Main</td>
                        <td>@i.Description</td>
                    </tr>
                }
            </table>
        </div>
    }
}

@if(errorMsg != null) // if there is an error to display
{
    <div>
        <br />
        <h4 style="color:red;">@errorMsg</h4>
    </div>
}


@code {
    public string errorMsg;
    public Forecast f = null;
    public string zipcode { get; set; }
    public string path = "https://api.openweathermap.org/data/2.5/weather?units=imperial&appid=0c9d70b001a131ec1b7798400723c28a&zip=";

    public async void GetForecastAsync()
    {
        try
        {
            errorMsg = null;
            f = await Http.GetFromJsonAsync<Forecast>(path + zipcode);
            StateHasChanged(); // necessary to refresh page upon change

        }
        catch 
        {
            f = null;
            errorMsg = "Something went wrong. Please try again.";
            StateHasChanged();
        }
    }

    // overall forecast container
    public class Forecast
    {
        public string Name { get; set; }
        public Main main { get; set; }
        public Weather[] weather { get; set; }
    }

    // container for the 'main' attribute
    public class Main
    {
        public decimal Temp { get; set; }
        public decimal Feels_Like { get; set; }
    }

    // container for the 'weather' attribute
    public class Weather
    {
        public string Main { get; set; }
        public string Description { get; set; }
    }
}